策略模式 Strategy Pattern
冒險者需要選擇不同的戰鬥策略(Strategy)來跟各種怪物戰鬥，例如說小怪物就小刀，遇到強一點的怪物就需要技能，遇殭屍就用火來燒。
所以注意，他用在經常變動的情況

目的：
將各種可以互換的演算法(策略)包裝成一個類別
將演算法從使用者中獨立出來，提高使用演算法上的彈性，因此可不修改主程式下，更換演算法。


用途：
選擇不同排序的算法、資料加密的方法、介面的排版、最短路徑的算法
依需求而更換物件時，或替換方法時，因此他會一直new 和 delete換類別
此Strategy Pattern與factory很類似，但factory是new之後幾乎不會再更動的，可讓兩個系統共存使用。
譬如選擇的弓箭手，通常不會突然變成鬥士，此案例通常用於行為的改變，決策選擇一種方法，譬如用弓箭射箭 變成用弓箭敲。
